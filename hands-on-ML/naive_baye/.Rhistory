mydata <- dplyr::select(post, -obs_index, -chain_index,-value.churn,-value.not.churn)
summary(mydata)
mydata2 <- transform(mydata,
apply = as.integer(apply),
channel=as.integer(channel),
churn = as.integer(churn),
fund=as.integer(fund),
open=as.integer(open))
summary(mydata2)
net2<-HydeNetwork(~channel+
apply|channel+
open|apply*channel+
fund|open*channel+
churn|open*fund*channel+
value|churn*open,data=mydata2)
net2
evidence=NULL
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
results2 <- transform(results,
apply = as.integer(apply)-1,
channel=as.integer(channel)-1,
churn = as.integer(churn)-1,
fund=as.integer(fund)-1,
open=as.integer(open)-1)
colMeans(results2)
evidence=list(apply==1)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
net2<-HydeNetwork(~channel+
apply|channel+
open|apply*channel+
fund|open*channel+
churn|open*fund*channel+
value|churn*open,data=mydata2)
evidence=NULL
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
evidence=list(apply=1)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
evidence=list(apply=1,open=1)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
evidence=list(apply=1,open=1, churn=1)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
evidence=list(apply=1,open=1, churn=1,fund=1)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
evidence=list(apply=1,open=1, fund=1, churn=0)
trackedVars<-c("channel","apply","open","fund","churn","value")
compiledNet<-compileJagsModel(net2,data=evidence,n.chain=3,n.adapt=5000)
post<-HydeSim(compiledNet,variable.names =trackedVars,n.iter=100000)
dplyr::sample_n(post,10)
results <- dplyr::select(post, -obs_index, -chain_index)
colMeans(results)
help(dbinom)
dbinom(1,1,prob=1/13)
1/13
dbinom(2,4,prob=1/13)
rm(list=ls())
install.packages("sqldf")
library(sqldf)
install.packages("C:/Users/hongjie/Desktop/sqldf_0.4-11.zip", repos = NULL, type = "win.binary")
ames <- AmesHousing::make_ames()
install.packages("AmesHousing")
ames <- AmesHousing::make_ames()
str(ames)
x=seq(1,10)
rsampling::bootstraps(x,times=2)
rsample::bootstraps(x,times=2)
install.packages("rsample")
rsample::bootstraps(x,times=2)
library(dplyr)
y<-rsample::bootstraps(x,times=2)
y
print(y)
x=seq(1,10)
mydata=data.frame(x)
mydata
y<-rsample::bootstraps(mydata,times=2)
y
y[1,1]
y$id=1
y$id=1
y
library(dplyr)
library(rsample)
rm(list=ls())
library(dplyr)
library(rsample)
ames <- AmesHousing::make_ames()
rm(list=ls())
library(dplyr)
library(rsample)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ams,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price)
rm(list=ls())
library(dplyr)
library(rsample)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ams,prop=0.7,strata="Sale_Price")
rm(list=ls())
library(dplyr)
library(rsample)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
help("expand.grid")
hyper_grid <- expand.grid(k = seq(2, 25, by = 1))
hyper_grid
summary(hyper_grid)
dim(hyper_grid)
hyper_grid(1,1)
hyper_grid[1,1]
hyper_grid[1,]
hyper_grid[2,]
hyper_grid[1:2,]
hyper_grid[1:20,]
hyper_grid
install.packages("ggplot2")
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
cv<-trainControl(
method="repeatedcv",
number=10,
repeats=5
)
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(2, 25, by = 1))
knn_fit<-train(
Sale_Price=.,
data=ame_train,
method="knn",
trControl=cv,
tuneGrid=hype_grid,
metric="RMSE"
)
knn_fit
ggplot(knn_fit)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
cv<-trainControl(
method="repeatedcv",
number=10,
repeats=5
)
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(2, 25, by = 1))
knn_fit<-train(
Sale_Price~.,
data=ame_train,
method="knn",
trControl=cv,
tuneGrid=hype_grid,
metric="RMSE"
)
knn_fit
ggplot(knn_fit)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
ames <- AmesHousing::make_ames()
set.seed(123)
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
cv<-trainControl(
method="repeatedcv",
number=10,
repeats=5
)
# Create grid of hyperparameter values
hyper_grid <- expand.grid(k = seq(2, 25, by = 1))
knn_fit<-train(
Sale_Price~.,
data=ame_train,
method="knn",
trControl=cv,
tuneGrid=hyper_grid,
metric="RMSE"
)
knn_fit
ggplot(knn_fit)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
set.seed(123)
ames <- AmesHousing::make_ames()
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
help(count)
count(ames_train,Neighborhood)
count(ame_train,Neighborhood)
help("prop.table")
prop.table(count(ame_train,Neighborhood))
count(ame_train,Neighborhood)
test<-count(ame_train,Neighborhood)
str(test)
test[1,1]
head(test)
tabulate(ame_train$Neighborhood)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ame_train<-training(split)
ame_test<-testing(split)
density(ame_train$Sale_Price) %>%plot
lines(density(ame_test$Sale_Price))
blueprint<-recipe(Sale_Price~.,data=ames_train) %>%
step_nzv(all_normal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(),-all_outcomes())%>%
step_scale(all_numeric(),-all_outcomes()) %>%
step_dummy(all_nominal(),-all_outcomes(),one_hot=TRUE)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ames_train<-training(split)
ames_test<-testing(split)
density(ames_train$Sale_Price) %>%plot
lines(density(ames_test$Sale_Price))
blueprint<-recipe(Sale_Price~.,data=ames_train) %>%
step_nzv(all_normal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(),-all_outcomes())%>%
step_scale(all_numeric(),-all_outcomes()) %>%
step_dummy(all_nominal(),-all_outcomes(),one_hot=TRUE)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ames_train<-training(split)
ames_test<-testing(split)
density(ames_train$Sale_Price) %>%plot
lines(density(ames_test$Sale_Price))
# use reciple pacakge to set up pre-processing blueprint
# specifiy the outcome var, nzv remove cat var with high concentration
blueprint<-recipe(Sale_Price~.,data=ames_train) %>%
step_nzv(all_normal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(),-all_outcomes())%>%
step_scale(all_numeric(),-all_outcomes()) %>%
step_dummy(all_nominal(),-all_outcomes(),one_hot=TRUE)
cv<-trainControl(
method="repeatedcv"
number=10,
repeats=5
)
hyper_grid<-expand.grid(k=seq(2,25,by=1))
knn_fit<-train(
blueprint,
data=ames_train,
method="knn",
trControl = cv,
tuneGrid = hyper_grid,
metric="RMSE"
)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ames_train<-training(split)
ames_test<-testing(split)
density(ames_train$Sale_Price) %>%plot
lines(density(ames_test$Sale_Price))
# use reciple pacakge to set up pre-processing blueprint
# specifiy the outcome var, nzv remove cat var with high concentration
blueprint<-recipe(Sale_Price~.,data=ames_train) %>%
step_nzv(all_normal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(),-all_outcomes())%>%
step_scale(all_numeric(),-all_outcomes()) %>%
step_dummy(all_nominal(),-all_outcomes(),one_hot=TRUE)
cv<-trainControl(
method="repeatedcv",
number=10,
repeats=5
)
hyper_grid<-expand.grid(k=seq(2,25,by=1))
knn_fit<-train(
blueprint,
data=ames_train,
method="knn",
trControl = cv,
tuneGrid = hyper_grid,
metric="RMSE"
)
rm(list=ls())
library(dplyr)
library(rsample)
library(caret)
library(ggplot2)
library(recipes)
set.seed(123)
ames <- AmesHousing::make_ames()
# use rsample pacakge to stratify
split<-initial_split(ames,prop=0.7,strata="Sale_Price")
ames_train<-training(split)
ames_test<-testing(split)
density(ames_train$Sale_Price) %>%plot
lines(density(ames_test$Sale_Price))
# use reciple pacakge to set up pre-processing blueprint
# specifiy the outcome var, nzv remove cat var with high concentration
blueprint<-recipe(Sale_Price~.,data=ames_train) %>%
step_nzv(all_nominal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(),-all_outcomes())%>%
step_scale(all_numeric(),-all_outcomes()) %>%
step_dummy(all_nominal(),-all_outcomes(),one_hot=TRUE)
cv<-trainControl(
method="repeatedcv",
number=10,
repeats=5
)
hyper_grid<-expand.grid(k=seq(2,25,by=1))
knn_fit<-train(
blueprint,
data=ames_train,
method="knn",
trControl = cv,
tuneGrid = hyper_grid,
metric="RMSE"
)
ggplot(knn_fit)
install.packages("tidyverse")
library(tidyverse)
email<-read_csv("email.csv")
str(email)
summar(email)
?pwd
setwd("c/users/hongjie/Documents/data_science/hands-on-ML/naive baye")
setwd("c/users/hongjie/Documents/data_science/hands-on-ML/naive_baye")
setwd("c:/users/hongjie/Documents/data_science/hands-on-ML/naive_baye")
mail<-read_csv("email.csv")
email<-read_csv("email.csv")
str(email)
dim(email)
?glimpse
glimpse(email)
head(email,5)
email<-email%>% mutate(
message_label=as.factor(message_label)
)
?gather
email %>%
gather(-message_index,-message_label,key="word",value="count")
?group_by
email%>%
gather(-message_index,-message_label,key="word",value="count") %>%
group_by(message_label,word) %>%
summarize(occurrence=sum(count)) %>%
arrange(message_label,desc(occurrence)) %>%
slide(1:10)
email%>%
gather(-message_index,-message_label,key="word",value="count") %>%
group_by(message_label,word) %>%
summarize(occurrence=sum(count)) %>%
arrange(message_label,desc(occurrence)) %>%
slice(1:10)
library(rsample)
set.seed(1234)
split_strat<-initial_split(email,prop=0.7,strata="message_label")
email_train<-training(split_strat)
email_test<-testing(split_strat)
table(email_train$message_label) %>%prop.table()
table(email_test$message_label) %>%prop.table()
library(e1071)
email_mod <-naiveBayes(message_label ~ .-message_index,
data = email_train,
laplace = 1)
summary(email_mod)
email_mod$tables
?predict
library(tidyverse)
library(rsample)
setwd("c:/users/hongjie/Documents/data_science/hands-on-ML/naive_baye")
email<-read_csv("email.csv")
str(email)
glimpse(email)
head(email,5)
email<-email%>% mutate(
message_label=as.factor(message_label)
)
email%>%
gather(-message_index,-message_label,key="word",value="count") %>%
group_by(message_label,word) %>%
summarize(occurrence=sum(count)) %>%
arrange(message_label,desc(occurrence)) %>%
slice(1:10)
set.seed(1234)
split_strat<-initial_split(email,prop=0.7,strata="message_label")
email_train<-training(split_strat)
email_test<-testing(split_strat)
table(email_train$message_label) %>%prop.table()
table(email_test$message_label) %>%prop.table()
library(e1071)
email_mod <-naiveBayes(message_label ~ .-message_index,
data = email_train,
laplace = 1)
prediction<-predict(email_mod,data=email_test,type = "class")
table(email_test$message_label,prediction)
prediction<-predict(email_mod,newdata=email_test,type = "class")
prediction[1:10]
table(prediction)
table(email_test$message_label,prediction)
